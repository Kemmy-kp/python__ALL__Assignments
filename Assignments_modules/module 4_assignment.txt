							module 4

                         ==================================================================

1)What is File function in python? What is keywords to create and write
file. 

#What is File function in python? What is keywords to create and write file.

1)Read Only ('r’): This mode opens the text files for reading only.
           The start of the file is where the handle is located.
           It raises the I/O error if the file does not exist.
           This is the default mode for opening files as well.
2)Read and Write ('r+’): This method opens the file for both reading and writing.
                The start of the file is where the handle is located.
                If the file does not exist, an I/O error gets raised.
3)Write Only ('w’): This mode opens the file for writing only.
            The data in existing files are modified and overwritten.
            The start of the file is where the handle is located.
            If the file does not already exist in the folder, a new one gets
            created.
4)Write and Read ('w+’): This mode opens the file for both reading and writing.
                The text is overwritten and deleted from an existing file.
                The start of the file is where the handle is located.
5)Append Only ('a’): This mode allows the file to be opened for writing.
             If the file doesn't yet exist, a new one gets created.
             The handle is set at the end of the file. The newly written data
             will be added at the end, following the previously written data.
6)Append and Read (‘a+’): Using this method, you can read and write in the file.
             If the file doesn't already exist, one gets created. The handle is
             set at the end of the file. The newly written text will be added at


Character	Mode               Description
‘r’	  Read (default)	--> Open a file for read only
‘w’	  Write	                -->Open a file for write only (overwrite)
                                   f = open('myfile.txt', 'w')
                                   f.write('Overwrite existing data.')


‘a’	  Append	        -->Open a file for write only (append)
                                    f = open('myfile.txt', 'a')
                                    f.write(' Append this text.')

‘r+’	  Read+Write	        -->open a file for both reading and writing
                                   f = open('myfile.txt', 'r+')
                                   f.write('---Overwrite content---')
‘x’	  Create	         -->Create a new file           
                                the end, following the previously written data.
===================================================================
2)Write a Python program to read an entire text file. 

f=open("2)my file.txt",'r')
n=int(input("how many  lines you want to read?:"))
for i in range(n):
    print(f.readline(),end="")
f.close()

o/p:(text file)
how many  lines you want to read?:3
hello how are you
pammy
rakholiya
===========================================================
3)Write a Python program to append text to a file and display the text. 

f = open("file.txt","a")
str = input("\n\t\tEnter Data TO Append  In file.txt : ")
f.write(str)
f = open("file.txt","r")
print(f.read())
f.close()

o/p:(textfile)
Enter Data TO Append  In file.txt : pammy
==========================================================
4)Write a Python program to read first n lines of a file. 

n = int(input("Enter Lines To Read : "))
f = open("file.txt","r")
for i in range(n):
	print(f.readline())
f.close()


o/p:
Enter Lines To Read : 2
1=one

2=two
==========================================
5)Write a Python program to read last n lines of a file. 

n = int(input("Enter n lines To Read : "))
f = open("2)my file.txt","r")
for line in (f.readline()[-n:]):
    print(line,end="")
f.close()

o/p:
Enter n lines To Read : 15
lo how are you
=========================================
6)Write a Python program to read a file line by line and store it into a list.

def file_read(fname):
        with open(fname) as f:
                   
                content_list = f.readlines()
                print(content_list)

file_read('2)my file.txt')

o/p:
['hello how are you\n', 'pammy\n', 'rakholiya\n', '\n']
=====================================================
7)Write a Python program to read a file line by line store it into a variable.

def file_read(fname):
        with open (fname, "r") as myfile:
                data=myfile.readlines()
                print(data)
file_read('2)my file.txt')

o/p:
'hello how are you\n', 'pammy\n', 'rakholiya\n', '\n']
==================================================
8)Write a python program to find the longest words.

def longest_word(filename):
    with open(filename, 'r') as infile:
              words = infile.read().split()
    max_len = len(max(words, key=len))
    return [word for word in words if len(word) == max_len]

print(longest_word('2)my file.txt'))

o/p:
['rakholiya']
=====================================
9)Write a Python program to count the number of lines in a text file.

fname = input("Enter file name: ")
num_lines = 0
with open(fname, 'r') as f:
    for line in f:
        num_lines += 1
print("Number of lines:")
print(num_lines)


o/p:
Enter file name: file.txt
Number of lines:
7
============================================
10)Write a Python program to count the frequency of words in a file.

from collections import Counter
def word_count(fname):
        with open(fname) as f:
                return Counter(f.read().split())

print("Number of words in the file :",word_count("2)my file.txt"))

o/p:
Number of words in the file : Counter({'hellohowareyou': 1, 'pammy': 1, 'rakholiya': 1})
===================================================
11)Write a Python program to write a list to a file.

color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
with open('file.txt', "w") as myfile:
        for c in color:
                myfile.write("%s\n" % c)

content = open('file.txt')
print(content.read())

o/p:
Red
Green
White
Black
Pink
Yellow
===================================================
12)Write a Python program to copy the contents of a file to another file.

f1=open("file.txt",mode='r',encoding='utf-8')
f2=open("2)my file.txt",mode='w',encoding='utf-8')
print(f1.readlines())
for line in data:
    f2.write

f1.close()
f2.close()

==================================================
13)Explain Exception handling? What is an Error in Python?

-->Exception handling is a programming concept that allows a program to deal
with unexpected situations or errors that may occur during its execution.
In Python, exceptions are a way to gracefully handle errors, making the code
more robust and preventing it from crashing.

-->Try Block: The code that might raise an exception is placed inside a try block.
If an exception occurs in this block, Python immediately stops executing the
code in the try block and jumps to the corresponding except block.

-->Except Block: The except block is where you specify the type of exception you
want to catch. If the type of exception raised in the try block matches the
type specified in the except block, the code inside the except block is
executed.

-->Handling Multiple Exceptions: You can have multiple except blocks to handle
different types of exceptions. They will be checked in order, and the first
one that matches the raised exception will be executed.


-->Else Block (optional): You can also include an else block which will be
executed if no exceptions are raised in the try block.

-->Finally Block (optional): The finally block, if present, will be executed
regardless of whether an exception was raised or not. It's typically used for
cleanup operations.

-->Syntax Errors: These occur when the code is not written correctly according
to the syntax rules of Python.These errors are caught by the interpreter
before the program is executed.

-->Exceptions: These are errors that occur during the execution of a program.
They are typically caused by something external to the code, like incorrect
user input, network problems, or file access issues. Examples include
ValueError, TypeError, and ZeroDivisionError.
======================================================
14)How many except statements can a try-except block have? Name Some
built-in exception classes:

IOError: if the file can’t be opened
KeyboardInterrupt: when an unrequired key is pressed by the user
ValueError: when the built-in function receives a wrong argument
EOFError: if End-Of-File is hit without reading any data
ImportError: if it is unable to find the module
===================================================
15)When will the else part of try-except-else be executed?

try:
    # Code that might raise an exception
    # ...
except SomeException:
    # Code to handle the exception
    # ...
else:
    # Code to execute if no exception is raised
    # ...
==========================================
16)Can one block of except statements handle multiple exception?

try:
    # Some code that might raise an exception
    # ...
except ExceptionType1 as e:
    # Code to handle ExceptionType1
    # ...
except ExceptionType2 as e:
    # Code to handle ExceptionType2
    # ...
-->"try" contains the code that may raise exceptions.
-->Each "except" block is followed by the type of exception
(ExceptionType1, ExceptionType2, etc.) that it should catch.
-->We can place the code to handle exceptions of a particular type in the
indented block following each "except" block.
==============================================
17)When is the finally block executed?

-->finally block is always executed after leaving the try statement. In case
if some exception was not handled by except block, it is re-raised after
execution of finally block.
-->finally block is used to deallocate the system resources.
-->One can use finally just after try without using except block, but no
exception is handled in that case.

try:
    # Code that might raise an exception
except SomeException:
    # Code to handle the exception
finally:
    # Code that will always be executed, whether an exception occurred or not
=============================================
18)What happens when „1‟== 1 is executed?

When you execute the expression "1" == 1, you are comparing a string ("1")
with an integer (1). In most programming languages, this will evaluate to false.

Here's a breakdown of what happens:

-->The left side of the comparison ("1") is a string literal, representing the
character "1".
-->The right side of the comparison (1) is an integer literal, representing the
numerical value one. Since the types are different, the language will attempt
to perform a type conversion to make the comparison meaningful. Depending on
the language, there might be implicit type conversions rules.

For example:
    in Python, the comparison "1" == 1 will evaluate to False because Python
    does not perform automatic type conversion in this context. In other words,
    a string and an integer are considered unequal.

-->If you want to compare them as numbers, you would need to explicitly convert
one of them, like this:

ex:
int("1") == 1
=========================================================
19)How Do You Handle Exceptions With Try/Except/Finally In Python?
Explain with coding snippets.

--->Exception handling with try, except, else, and finally

1)Try: This block will test the excepted error to occur
2)Except:  Here you can handle the error
3)Else: If there is no exception then this block will be executed
4)Finally: Finally block always gets executed either exception is generated
or not


try:
       # Some Code.... 

except:
       # optional block
       # Handling of exception (if required)

else:
       # execute if no exception

finally:
      # Some code .....(always executed)
========================================
20)Write python program that user to enter only odd numbers, else will raise an exception.

class EvenNumberError(Exception):
    pass

def get_odd_number():
    try:
        num = int(input("Please enter an odd number: "))
        if num % 2 == 0:
            raise EvenNumberError("You entered an even number!")
        else:
            print(f"You entered {num}, which is an odd number.")
    except ValueError:
        print("Invalid input. Please enter a valid number.")
    except EvenNumberError as e:
        print(e)

get_odd_number()

o/p:
Please enter an odd number: 23
You entered 23, which is an odd number.

Please enter an odd number: 24
You entered an even number!

=========================================
21)What are oops concepts? Is multiple inheritance supported in java.

-->Object-Oriented Programming (OOP) is a programming paradigm based on the
concept of "objects", which can contain data and code: data in the form of
fields (attributes), and code in the form of procedures (methods).The main OOP
concepts are:

1)Class and Object:

A class is a blueprint for creating objects. It defines the attributes
(data members) and methods (functions) that the objects of the class will have.
An object is an instance of a class.

2)Encapsulation:

Encapsulation is the bundling of data (attributes) and methods (functions)
that operate on that data into a single unit or class. It helps in controlling
access to the data.

3)Inheritance:

Inheritance is the mechanism by which one class can inherit the attributes
and methods of another class. It allows for code reuse and the creation of
hierarchies of classes.

4)Polymorphism:

Polymorphism allows objects to be treated as instances of their base class.
This means that a method defined in a base class can be overridden in a
subclass with a specific implementation.

5)Abstraction:

Abstraction involves hiding the implementation details of an object and
exposing only the relevant parts to the user. It focuses on what an object
does rather than how it does it.

-->Java does not support multiple inheritance of classes because it can lead
to problems like the diamond problem (where ambiguity arises when a class
inherits from two or more classes that have a common ancestor).

ex:
interface Interface1 {
    void method1();
}

interface Interface2 {
    void method2();
}

class MyClass implements Interface1, Interface2 {
    public void method1() {
        // ...
    }
    
    public void method2() {
        // ...
    }
}



 








